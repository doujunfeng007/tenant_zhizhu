<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minigod.zero.data.mapper.AccountBusinessFlowMapper">

    <resultMap id="BaseResultMap" type="com.minigod.zero.data.entity.AccountBusinessFlow">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="custId" column="cust_id" jdbcType="BIGINT"/>
            <result property="accountId" column="account_id" jdbcType="VARCHAR"/>
            <result property="businessId" column="business_id" jdbcType="VARCHAR"/>
            <result property="amount" column="amount" jdbcType="DECIMAL"/>
            <result property="currency" column="currency" jdbcType="VARCHAR"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="status" column="status" jdbcType="INTEGER"/>
            <result property="payAmount" column="pay_amount" jdbcType="DECIMAL"/>
            <result property="refundingAmount" column="refunding_amount" jdbcType="DECIMAL"/>
            <result property="source" column="source" jdbcType="VARCHAR"/>
            <result property="exchangeRate" column="exchange_rate" jdbcType="VARCHAR"/>
            <result property="businessType" column="business_type" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,cust_id,account_id,
        business_id,amount,currency,
        create_time,status,pay_amount,
        refunding_amount,source,exchange_rate,
        business_type
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from account_business_flow
        where  id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from account_business_flow
        where  id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.minigod.zero.data.entity.AccountBusinessFlow" useGeneratedKeys="true">
        insert into account_business_flow
        ( id,cust_id,account_id
        ,business_id,amount,currency
        ,create_time,status,pay_amount
        ,refunding_amount,source,exchange_rate
        ,business_type)
        values (#{id,jdbcType=INTEGER},#{custId,jdbcType=BIGINT},#{accountId,jdbcType=VARCHAR}
        ,#{businessId,jdbcType=VARCHAR},#{amount,jdbcType=DECIMAL},#{currency,jdbcType=VARCHAR}
        ,#{createTime,jdbcType=TIMESTAMP},#{status,jdbcType=INTEGER},#{payAmount,jdbcType=DECIMAL}
        ,#{refundingAmount,jdbcType=DECIMAL},#{source,jdbcType=VARCHAR},#{exchangeRate,jdbcType=VARCHAR}
        ,#{businessType,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.minigod.zero.data.entity.AccountBusinessFlow" useGeneratedKeys="true">
        insert into account_business_flow
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">id,</if>
                <if test="custId != null">cust_id,</if>
                <if test="accountId != null">account_id,</if>
                <if test="businessId != null">business_id,</if>
                <if test="amount != null">amount,</if>
                <if test="currency != null">currency,</if>
                <if test="createTime != null">create_time,</if>
                <if test="status != null">status,</if>
                <if test="payAmount != null">pay_amount,</if>
                <if test="refundingAmount != null">refunding_amount,</if>
                <if test="source != null">source,</if>
                <if test="exchangeRate != null">exchange_rate,</if>
                <if test="businessType != null">business_type,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id,jdbcType=INTEGER},</if>
                <if test="custId != null">#{custId,jdbcType=BIGINT},</if>
                <if test="accountId != null">#{accountId,jdbcType=VARCHAR},</if>
                <if test="businessId != null">#{businessId,jdbcType=VARCHAR},</if>
                <if test="amount != null">#{amount,jdbcType=DECIMAL},</if>
                <if test="currency != null">#{currency,jdbcType=VARCHAR},</if>
                <if test="createTime != null">#{createTime,jdbcType=TIMESTAMP},</if>
                <if test="status != null">#{status,jdbcType=INTEGER},</if>
                <if test="payAmount != null">#{payAmount,jdbcType=DECIMAL},</if>
                <if test="refundingAmount != null">#{refundingAmount,jdbcType=DECIMAL},</if>
                <if test="source != null">#{source,jdbcType=VARCHAR},</if>
                <if test="exchangeRate != null">#{exchangeRate,jdbcType=VARCHAR},</if>
                <if test="businessType != null">#{businessType,jdbcType=INTEGER},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.minigod.zero.data.entity.AccountBusinessFlow">
        update account_business_flow
        <set>
                <if test="custId != null">
                    cust_id = #{custId,jdbcType=BIGINT},
                </if>
                <if test="accountId != null">
                    account_id = #{accountId,jdbcType=VARCHAR},
                </if>
                <if test="businessId != null">
                    business_id = #{businessId,jdbcType=VARCHAR},
                </if>
                <if test="amount != null">
                    amount = #{amount,jdbcType=DECIMAL},
                </if>
                <if test="currency != null">
                    currency = #{currency,jdbcType=VARCHAR},
                </if>
                <if test="createTime != null">
                    create_time = #{createTime,jdbcType=TIMESTAMP},
                </if>
                <if test="status != null">
                    status = #{status,jdbcType=INTEGER},
                </if>
                <if test="payAmount != null">
                    pay_amount = #{payAmount,jdbcType=DECIMAL},
                </if>
                <if test="refundingAmount != null">
                    refunding_amount = #{refundingAmount,jdbcType=DECIMAL},
                </if>
                <if test="source != null">
                    source = #{source,jdbcType=VARCHAR},
                </if>
                <if test="exchangeRate != null">
                    exchange_rate = #{exchangeRate,jdbcType=VARCHAR},
                </if>
                <if test="businessType != null">
                    business_type = #{businessType,jdbcType=INTEGER},
                </if>
        </set>
        where   id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.minigod.zero.data.entity.AccountBusinessFlow">
        update account_business_flow
        set
            cust_id =  #{custId,jdbcType=BIGINT},
            account_id =  #{accountId,jdbcType=VARCHAR},
            business_id =  #{businessId,jdbcType=VARCHAR},
            amount =  #{amount,jdbcType=DECIMAL},
            currency =  #{currency,jdbcType=VARCHAR},
            create_time =  #{createTime,jdbcType=TIMESTAMP},
            status =  #{status,jdbcType=INTEGER},
            pay_amount =  #{payAmount,jdbcType=DECIMAL},
            refunding_amount =  #{refundingAmount,jdbcType=DECIMAL},
            source =  #{source,jdbcType=VARCHAR},
            exchange_rate =  #{exchangeRate,jdbcType=VARCHAR},
            business_type =  #{businessType,jdbcType=INTEGER}
        where   id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selWithdrawList" resultType="com.minigod.zero.data.entity.FinancingAccountAmountFlows">
        select faaf.* from financing_account_amount_flows as faaf
        where faaf.account_id =  #{accountId}
        and faaf.create_time between #{startDate}  and #{endDate}
        and faaf.operation_type  in (1,2,4,6)
        AND faaf.business_type in <foreach collection="withdrawIds" item="item" open="(" separator="," close=")">#{item}</foreach>

    </select>
</mapper>
