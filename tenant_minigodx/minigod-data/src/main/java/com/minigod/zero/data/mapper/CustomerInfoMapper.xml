<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minigod.zero.data.mapper.CustomerInfoMapper">

    <resultMap id="BaseResultMap" type="com.minigod.zero.data.entity.CustomerInfo">
            <id property="id" column="id" jdbcType="BIGINT"/>
            <result property="tenantId" column="tenant_id" jdbcType="VARCHAR"/>
            <result property="nickName" column="nick_name" jdbcType="VARCHAR"/>
            <result property="signature" column="signature" jdbcType="VARCHAR"/>
            <result property="gender" column="gender" jdbcType="TINYINT"/>
            <result property="custIcon" column="cust_icon" jdbcType="CHAR"/>
            <result property="custChannel" column="cust_channel" jdbcType="VARCHAR"/>
            <result property="password" column="password" jdbcType="VARCHAR"/>
            <result property="invCustId" column="inv_cust_id" jdbcType="BIGINT"/>
            <result property="custType" column="cust_type" jdbcType="TINYINT"/>
            <result property="lockVersion" column="lock_version" jdbcType="INTEGER"/>
            <result property="cellPhone" column="cell_phone" jdbcType="VARCHAR"/>
            <result property="areaCode" column="area_code" jdbcType="VARCHAR"/>
            <result property="regSourceType" column="reg_source_type" jdbcType="TINYINT"/>
            <result property="regChannel" column="reg_channel" jdbcType="TINYINT"/>
            <result property="cellEmail" column="cell_email" jdbcType="VARCHAR"/>
            <result property="createUser" column="create_user" jdbcType="BIGINT"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="updateUser" column="update_user" jdbcType="BIGINT"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
            <result property="status" column="status" jdbcType="TINYINT"/>
            <result property="cancelTime" column="cancel_time" jdbcType="TIMESTAMP"/>
            <result property="bindCust" column="bind_cust" jdbcType="BIGINT"/>
            <result property="isDeleted" column="is_deleted" jdbcType="TINYINT"/>
            <result property="createDept" column="create_dept" jdbcType="BIGINT"/>
            <result property="piLevel" column="pi_level" jdbcType="INTEGER"/>
            <result property="riskLevel" column="risk_level" jdbcType="INTEGER"/>
            <result property="piRiskLevel" column="pi_risk_level" jdbcType="INTEGER"/>
            <result property="derivative" column="derivative" jdbcType="INTEGER"/>
            <result property="riskExpiryDate" column="risk_expiry_date" jdbcType="DATE"/>
            <result property="pwdUpdTime" column="pwd_upd_time" jdbcType="TIMESTAMP"/>
            <result property="pwdWarnStatus" column="pwd_warn_status" jdbcType="TINYINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,tenant_id,nick_name,
        signature,gender,cust_icon,
        cust_channel,password,inv_cust_id,
        cust_type,lock_version,cell_phone,
        area_code,reg_source_type,reg_channel,
        cell_email,create_user,create_time,
        update_user,update_time,status,
        cancel_time,bind_cust,is_deleted,
        create_dept,pi_level,risk_level,
        pi_risk_level,derivative,risk_expiry_date,
        pwd_upd_time,pwd_warn_status
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from customer_info
        where  id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from customer_info
        where  id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.minigod.zero.data.entity.CustomerInfo" useGeneratedKeys="true">
        insert into customer_info
        ( id,tenant_id,nick_name
        ,signature,gender,cust_icon
        ,cust_channel,password,inv_cust_id
        ,cust_type,lock_version,cell_phone
        ,area_code,reg_source_type,reg_channel
        ,cell_email,create_user,create_time
        ,update_user,update_time,status
        ,cancel_time,bind_cust,is_deleted
        ,create_dept,pi_level,risk_level
        ,pi_risk_level,derivative,risk_expiry_date
        ,pwd_upd_time,pwd_warn_status)
        values (#{id,jdbcType=BIGINT},#{tenantId,jdbcType=VARCHAR},#{nickName,jdbcType=VARCHAR}
        ,#{signature,jdbcType=VARCHAR},#{gender,jdbcType=TINYINT},#{custIcon,jdbcType=CHAR}
        ,#{custChannel,jdbcType=VARCHAR},#{password,jdbcType=VARCHAR},#{invCustId,jdbcType=BIGINT}
        ,#{custType,jdbcType=TINYINT},#{lockVersion,jdbcType=INTEGER},#{cellPhone,jdbcType=VARCHAR}
        ,#{areaCode,jdbcType=VARCHAR},#{regSourceType,jdbcType=TINYINT},#{regChannel,jdbcType=TINYINT}
        ,#{cellEmail,jdbcType=VARCHAR},#{createUser,jdbcType=BIGINT},#{createTime,jdbcType=TIMESTAMP}
        ,#{updateUser,jdbcType=BIGINT},#{updateTime,jdbcType=TIMESTAMP},#{status,jdbcType=TINYINT}
        ,#{cancelTime,jdbcType=TIMESTAMP},#{bindCust,jdbcType=BIGINT},#{isDeleted,jdbcType=TINYINT}
        ,#{createDept,jdbcType=BIGINT},#{piLevel,jdbcType=INTEGER},#{riskLevel,jdbcType=INTEGER}
        ,#{piRiskLevel,jdbcType=INTEGER},#{derivative,jdbcType=INTEGER},#{riskExpiryDate,jdbcType=DATE}
        ,#{pwdUpdTime,jdbcType=TIMESTAMP},#{pwdWarnStatus,jdbcType=TINYINT})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.minigod.zero.data.entity.CustomerInfo" useGeneratedKeys="true">
        insert into customer_info
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">id,</if>
                <if test="tenantId != null">tenant_id,</if>
                <if test="nickName != null">nick_name,</if>
                <if test="signature != null">signature,</if>
                <if test="gender != null">gender,</if>
                <if test="custIcon != null">cust_icon,</if>
                <if test="custChannel != null">cust_channel,</if>
                <if test="password != null">password,</if>
                <if test="invCustId != null">inv_cust_id,</if>
                <if test="custType != null">cust_type,</if>
                <if test="lockVersion != null">lock_version,</if>
                <if test="cellPhone != null">cell_phone,</if>
                <if test="areaCode != null">area_code,</if>
                <if test="regSourceType != null">reg_source_type,</if>
                <if test="regChannel != null">reg_channel,</if>
                <if test="cellEmail != null">cell_email,</if>
                <if test="createUser != null">create_user,</if>
                <if test="createTime != null">create_time,</if>
                <if test="updateUser != null">update_user,</if>
                <if test="updateTime != null">update_time,</if>
                <if test="status != null">status,</if>
                <if test="cancelTime != null">cancel_time,</if>
                <if test="bindCust != null">bind_cust,</if>
                <if test="isDeleted != null">is_deleted,</if>
                <if test="createDept != null">create_dept,</if>
                <if test="piLevel != null">pi_level,</if>
                <if test="riskLevel != null">risk_level,</if>
                <if test="piRiskLevel != null">pi_risk_level,</if>
                <if test="derivative != null">derivative,</if>
                <if test="riskExpiryDate != null">risk_expiry_date,</if>
                <if test="pwdUpdTime != null">pwd_upd_time,</if>
                <if test="pwdWarnStatus != null">pwd_warn_status,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id,jdbcType=BIGINT},</if>
                <if test="tenantId != null">#{tenantId,jdbcType=VARCHAR},</if>
                <if test="nickName != null">#{nickName,jdbcType=VARCHAR},</if>
                <if test="signature != null">#{signature,jdbcType=VARCHAR},</if>
                <if test="gender != null">#{gender,jdbcType=TINYINT},</if>
                <if test="custIcon != null">#{custIcon,jdbcType=CHAR},</if>
                <if test="custChannel != null">#{custChannel,jdbcType=VARCHAR},</if>
                <if test="password != null">#{password,jdbcType=VARCHAR},</if>
                <if test="invCustId != null">#{invCustId,jdbcType=BIGINT},</if>
                <if test="custType != null">#{custType,jdbcType=TINYINT},</if>
                <if test="lockVersion != null">#{lockVersion,jdbcType=INTEGER},</if>
                <if test="cellPhone != null">#{cellPhone,jdbcType=VARCHAR},</if>
                <if test="areaCode != null">#{areaCode,jdbcType=VARCHAR},</if>
                <if test="regSourceType != null">#{regSourceType,jdbcType=TINYINT},</if>
                <if test="regChannel != null">#{regChannel,jdbcType=TINYINT},</if>
                <if test="cellEmail != null">#{cellEmail,jdbcType=VARCHAR},</if>
                <if test="createUser != null">#{createUser,jdbcType=BIGINT},</if>
                <if test="createTime != null">#{createTime,jdbcType=TIMESTAMP},</if>
                <if test="updateUser != null">#{updateUser,jdbcType=BIGINT},</if>
                <if test="updateTime != null">#{updateTime,jdbcType=TIMESTAMP},</if>
                <if test="status != null">#{status,jdbcType=TINYINT},</if>
                <if test="cancelTime != null">#{cancelTime,jdbcType=TIMESTAMP},</if>
                <if test="bindCust != null">#{bindCust,jdbcType=BIGINT},</if>
                <if test="isDeleted != null">#{isDeleted,jdbcType=TINYINT},</if>
                <if test="createDept != null">#{createDept,jdbcType=BIGINT},</if>
                <if test="piLevel != null">#{piLevel,jdbcType=INTEGER},</if>
                <if test="riskLevel != null">#{riskLevel,jdbcType=INTEGER},</if>
                <if test="piRiskLevel != null">#{piRiskLevel,jdbcType=INTEGER},</if>
                <if test="derivative != null">#{derivative,jdbcType=INTEGER},</if>
                <if test="riskExpiryDate != null">#{riskExpiryDate,jdbcType=DATE},</if>
                <if test="pwdUpdTime != null">#{pwdUpdTime,jdbcType=TIMESTAMP},</if>
                <if test="pwdWarnStatus != null">#{pwdWarnStatus,jdbcType=TINYINT},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.minigod.zero.data.entity.CustomerInfo">
        update customer_info
        <set>
                <if test="tenantId != null">
                    tenant_id = #{tenantId,jdbcType=VARCHAR},
                </if>
                <if test="nickName != null">
                    nick_name = #{nickName,jdbcType=VARCHAR},
                </if>
                <if test="signature != null">
                    signature = #{signature,jdbcType=VARCHAR},
                </if>
                <if test="gender != null">
                    gender = #{gender,jdbcType=TINYINT},
                </if>
                <if test="custIcon != null">
                    cust_icon = #{custIcon,jdbcType=CHAR},
                </if>
                <if test="custChannel != null">
                    cust_channel = #{custChannel,jdbcType=VARCHAR},
                </if>
                <if test="password != null">
                    password = #{password,jdbcType=VARCHAR},
                </if>
                <if test="invCustId != null">
                    inv_cust_id = #{invCustId,jdbcType=BIGINT},
                </if>
                <if test="custType != null">
                    cust_type = #{custType,jdbcType=TINYINT},
                </if>
                <if test="lockVersion != null">
                    lock_version = #{lockVersion,jdbcType=INTEGER},
                </if>
                <if test="cellPhone != null">
                    cell_phone = #{cellPhone,jdbcType=VARCHAR},
                </if>
                <if test="areaCode != null">
                    area_code = #{areaCode,jdbcType=VARCHAR},
                </if>
                <if test="regSourceType != null">
                    reg_source_type = #{regSourceType,jdbcType=TINYINT},
                </if>
                <if test="regChannel != null">
                    reg_channel = #{regChannel,jdbcType=TINYINT},
                </if>
                <if test="cellEmail != null">
                    cell_email = #{cellEmail,jdbcType=VARCHAR},
                </if>
                <if test="createUser != null">
                    create_user = #{createUser,jdbcType=BIGINT},
                </if>
                <if test="createTime != null">
                    create_time = #{createTime,jdbcType=TIMESTAMP},
                </if>
                <if test="updateUser != null">
                    update_user = #{updateUser,jdbcType=BIGINT},
                </if>
                <if test="updateTime != null">
                    update_time = #{updateTime,jdbcType=TIMESTAMP},
                </if>
                <if test="status != null">
                    status = #{status,jdbcType=TINYINT},
                </if>
                <if test="cancelTime != null">
                    cancel_time = #{cancelTime,jdbcType=TIMESTAMP},
                </if>
                <if test="bindCust != null">
                    bind_cust = #{bindCust,jdbcType=BIGINT},
                </if>
                <if test="isDeleted != null">
                    is_deleted = #{isDeleted,jdbcType=TINYINT},
                </if>
                <if test="createDept != null">
                    create_dept = #{createDept,jdbcType=BIGINT},
                </if>
                <if test="piLevel != null">
                    pi_level = #{piLevel,jdbcType=INTEGER},
                </if>
                <if test="riskLevel != null">
                    risk_level = #{riskLevel,jdbcType=INTEGER},
                </if>
                <if test="piRiskLevel != null">
                    pi_risk_level = #{piRiskLevel,jdbcType=INTEGER},
                </if>
                <if test="derivative != null">
                    derivative = #{derivative,jdbcType=INTEGER},
                </if>
                <if test="riskExpiryDate != null">
                    risk_expiry_date = #{riskExpiryDate,jdbcType=DATE},
                </if>
                <if test="pwdUpdTime != null">
                    pwd_upd_time = #{pwdUpdTime,jdbcType=TIMESTAMP},
                </if>
                <if test="pwdWarnStatus != null">
                    pwd_warn_status = #{pwdWarnStatus,jdbcType=TINYINT},
                </if>
        </set>
        where   id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.minigod.zero.data.entity.CustomerInfo">
        update customer_info
        set
            tenant_id =  #{tenantId,jdbcType=VARCHAR},
            nick_name =  #{nickName,jdbcType=VARCHAR},
            signature =  #{signature,jdbcType=VARCHAR},
            gender =  #{gender,jdbcType=TINYINT},
            cust_icon =  #{custIcon,jdbcType=CHAR},
            cust_channel =  #{custChannel,jdbcType=VARCHAR},
            password =  #{password,jdbcType=VARCHAR},
            inv_cust_id =  #{invCustId,jdbcType=BIGINT},
            cust_type =  #{custType,jdbcType=TINYINT},
            lock_version =  #{lockVersion,jdbcType=INTEGER},
            cell_phone =  #{cellPhone,jdbcType=VARCHAR},
            area_code =  #{areaCode,jdbcType=VARCHAR},
            reg_source_type =  #{regSourceType,jdbcType=TINYINT},
            reg_channel =  #{regChannel,jdbcType=TINYINT},
            cell_email =  #{cellEmail,jdbcType=VARCHAR},
            create_user =  #{createUser,jdbcType=BIGINT},
            create_time =  #{createTime,jdbcType=TIMESTAMP},
            update_user =  #{updateUser,jdbcType=BIGINT},
            update_time =  #{updateTime,jdbcType=TIMESTAMP},
            status =  #{status,jdbcType=TINYINT},
            cancel_time =  #{cancelTime,jdbcType=TIMESTAMP},
            bind_cust =  #{bindCust,jdbcType=BIGINT},
            is_deleted =  #{isDeleted,jdbcType=TINYINT},
            create_dept =  #{createDept,jdbcType=BIGINT},
            pi_level =  #{piLevel,jdbcType=INTEGER},
            risk_level =  #{riskLevel,jdbcType=INTEGER},
            pi_risk_level =  #{piRiskLevel,jdbcType=INTEGER},
            derivative =  #{derivative,jdbcType=INTEGER},
            risk_expiry_date =  #{riskExpiryDate,jdbcType=DATE},
            pwd_upd_time =  #{pwdUpdTime,jdbcType=TIMESTAMP},
            pwd_warn_status =  #{pwdWarnStatus,jdbcType=TINYINT}
        where   id = #{id,jdbcType=BIGINT}
    </update>

    <select id="statisticsByPiLevel" resultType="com.minigod.zero.data.vo.CustomerInfoForPICountVO">
        -- 统计PI用户数和非PI用户数占比情况
        WITH total_count AS (
            SELECT COUNT(*) AS total
            FROM customer_info
            WHERE is_deleted = 0
        )
        SELECT
            SUM(CASE WHEN pi_level = 4 THEN 1 ELSE 0 END) as piLevelFourCount,  																-- PI用户数
            SUM(CASE WHEN pi_level != 4 OR pi_level IS NULL THEN 1 ELSE 0 END) as piLevelNotFourCount,  										-- 非PI用户数
            ROUND(SUM(CASE WHEN pi_level = 4 THEN 1 ELSE 0 END) * 100.0 / total_count.total, 2) as piLevelFourRatio,  							-- PI用户数占比
            ROUND(SUM(CASE WHEN pi_level != 4 OR pi_level IS NULL THEN 1 ELSE 0 END) * 100.0 / total_count.total, 2) as piLevelNotFourRatio  	-- 非PI用户数占比
        FROM
            customer_info, total_count
        WHERE
            is_deleted = 0
    </select>

    <select id="statisticsPiUserCount" resultType="java.lang.Integer">
        -- 统计PI客户总数
        SELECT COUNT(*) AS piUserCount
        FROM customer_info
        WHERE is_deleted = 0 AND pi_level IS NOT NULL AND pi_level = 4
    </select>




    <select id="hldHoldingStatementList" resultType="com.minigod.zero.data.vo.HldHoldingStatementMonthVO">
        /*活利得月结单持仓总览*/
        select t.hld_code as hldCode,
               t.hld_name as hldName,
               t.currency,
               COALESCE(t.total_quantity , 0)  as quantity,
               COALESCE(t2.nominalValue, 0) as nominalValue,
               COALESCE(t.total_quantity, 0) * COALESCE(t2.nominalValue, 0) as faceAmount,
               COALESCE(t.total_gain_loss, 0) as transactionGainLoss,
               COALESCE(t3.rate, 1) as rate,
               (COALESCE(t.total_quantity, 0) * COALESCE(t2.nominalValue, 0)  * COALESCE(t3.rate, 1) + COALESCE(t.total_gain_loss, 0)) as hldMarket,
               COALESCE(t4.price, 100) as price
        from customer_hld_holding_records t
                 left join t_product t2 on t.hld_code = t2.productId
                 LEFT JOIN t_market_reference_price t4 ON t.hld_code = t4.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'
        where   t.total_quantity &gt; 0
          and t.sub_account_id = #{custStatementDTO.subAccountId}
    </select>
    <select id="hldTradingStatementList" resultType="com.minigod.zero.data.vo.HldTradingBuyStatementDailyVO">
        /*活利得日结单-活利得交易明细-活利得买入确认单*/
        select t2.name as hldName ,
               t2.isin as hldCode,
               t.transactionDate AS transactionDate,
               t.currency AS currency,
               t.orderId AS orderId,
               COALESCE(t.quantity, 0) as quantity,
               COALESCE(t2.nominalValue ,0)as  nominalValue,
               COALESCE(t.quantity, 0) * COALESCE(t2.nominalValue, 0)  as faceAmount,
               COALESCE(t.price,0)as businessPrice,
               COALESCE(t.amount,0) as amout,
               COALESCE(t1.transaction_gain_loss,0)as transactionGainLoss,
               COALESCE(t3.rate, 1) as rate,
               t1.type as orderType,
               COALESCE(t.fee,0) as fee
        from customer_hld_trading_transaction t
                 left join customer_hld_trading_records t1 on t.orderId = t1.id
                 left join t_product t2 on t.fundCode = t2.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'

        where t.type = 3000 and  t.createTime  &gt;= #{custStatementDTO.startDate}
          and t.createTime  &lt;= #{custStatementDTO.endDate}
          and t.subAccountId = #{custStatementDTO.subAccountId}
    </select>
    <select id="hldTradingSaleStatementList"
            resultType="com.minigod.zero.data.vo.HldTradingSaleStatementDailyVO">
        /*活利得日结单-活利得交易明细-活利得卖出确认单*/
        select t2.name as hldName ,
               t2.isin as hldCode,
               t.transactionDate AS transactionDate,
               t.currency AS currency,
               t.orderId AS orderId,
               COALESCE(t.quantity, 0) as quantity,
               COALESCE(t2.nominalValue ,0)as  nominalValue,
               COALESCE(t.quantity, 0) * COALESCE(t2.nominalValue, 0)  as faceAmount,
               COALESCE(t.price,0)as businessPrice,
               COALESCE(t.amount,0) as amout,
               COALESCE(t1.transaction_gain_loss,0)as transactionGainLoss,
               COALESCE(t.amount,0) as totalSettlementAmount,
               COALESCE(t3.rate, 1) as rate,
               t1.type as orderType,
               COALESCE(t.fee,0) as fee
        from customer_hld_trading_transaction t
                 left join customer_hld_trading_records t1 on t.orderId = t1.id
                 left join t_product t2 on t.fundCode = t2.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'

        where  t.type = 3100 and  t.createTime  &gt;= #{custStatementDTO.startDate}
          and t.createTime  &lt;= #{custStatementDTO.endDate}
          and t.subAccountId = #{custStatementDTO.subAccountId}

    </select>
    <select id="hldHoldingHistoryStatementList"
            resultType="com.minigod.zero.data.vo.HldHoldingHistoryStatementDailyVO">
        /*活利得日结单-2-2.活利得持仓总览*/
        select t2.isin  as hldCode,
               t2.productId as productId,
               t.hld_name as hldName,
               t.currency,
               COALESCE(t.total_quantity , 0)  as quantity,
               COALESCE(t2.nominalValue, 0) as nominalValue ,
               COALESCE(t.total_quantity, 0) * COALESCE(t2.nominalValue, 0) as faceAmount,
               COALESCE(t.total_gain_loss, 0) as totalGainLoss,
               COALESCE(t1.price, 100) as price,
               COALESCE(t3.rate, 1) as rate,
               (COALESCE(t.total_quantity, 0) * COALESCE(t2.nominalValue, 0)) as hldMarket
        from customer_hld_holding_records t
                 left join t_product t2 on t.hld_code = t2.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'
                 left join t_market_reference_price t1 on t.hld_code = t1.productId

        where t.total_quantity &gt; 0
          and t.sub_account_id = #{custStatementDTO.subAccountId}



    </select>
    <select id="selCustHldStatement" resultType="com.minigod.zero.data.vo.CustStatementVO">
        /*活利得日结单-1-1.客户基本信息*/
        select
            CASE
                WHEN c1.client_name IS NOT NULL  AND c1.client_name &lt;&gt; '' THEN
                    CONCAT(c1.client_name)
                ELSE
                    CONCAT(c1.given_name_spell, ' ', c1.family_name_spell)
                END AS custName  ,
            c1.contact_detail_address as accountContactAddress,
            c2.trade_account as accountNumber,
            c3.sub_account as subAccountId
        from customer_hld_capital_account AS c3
                 inner join customer_hld_trading_account AS c2  on c2.trade_account = c3.trade_account
                 inner join customer_basic_info AS c1   on c1.cust_id = CONCAT(c2.cust_id,'')
        where c1.cust_id = #{id}

    </select>

    <select id="selCustBondStatement" resultType="com.minigod.zero.data.vo.CustStatementVO">
        /*债卷易.客户基本信息*/
        select
            CASE
                WHEN c1.client_name IS NOT NULL  AND c1.client_name &lt;&gt; '' THEN
                    CONCAT(c1.client_name)
                ELSE
                    CONCAT(c1.given_name_spell, ' ', c1.family_name_spell)
                END AS custName  ,
            c1.contact_detail_address as accountContactAddress,
            C2.trade_account as accountNumber,
            C3.sub_account as subAccountId,
            C2.account_id as accountId
        from customer_bond_capital_account AS C3
                 inner join customer_bond_trading_account AS C2  on C2.trade_account = C3.trade_account
                 inner join customer_basic_info AS c1   on c1.cust_id = CONCAT(C2.cust_id,'')
        where c1.cust_id = #{id}

    </select><select id="selCustFundStatement" resultType="com.minigod.zero.data.vo.CustStatementVO">
        /*基金.客户基本信息*/
        select
            CASE
                WHEN c1.client_name IS NOT NULL  AND c1.client_name &lt;&gt; '' THEN
                    CONCAT(c1.client_name)
                ELSE
                    CONCAT(c1.given_name_spell, ' ', c1.family_name_spell)
                END AS custName  ,
            c1.contact_detail_address as accountContactAddress,
            C2.trade_account as accountNumber,
            C3.fund_account as subAccountId,
            C2.account_id as accountId
        from customer_fund_capital_account AS C3
                 inner join customer_fund_trading_account AS C2  on C2.trade_account = C3.trade_account
                 inner join customer_basic_info AS c1   on c1.cust_id = CONCAT(C2.cust_id,'')
        where c1.cust_id = #{id}

    </select>

    <select id="selCustList" resultType="java.lang.String">
        (select a1.cust_id
         from customer_basic_info as a1
                  left join customer_bond_trading_account as a2 on a1.cust_id=a2.cust_id
                  left join customer_bond_capital_account as a4 on a4.trade_account= a2.trade_account
         where a4.sub_account in
               (SELECT p.subAccountId
                FROM customer_bond_holding_history p
                         INNER JOIN (
                    SELECT a.subAccountId, MAX(a.id) AS flowId
                    FROM customer_bond_holding_history a
                    GROUP BY a.subAccountId
                ) q ON p.id = q.flowId AND p.subAccountId = q.subAccountId
                WHERE p.totalQuantity > 0
                GROUP BY p.subAccountId))
        union
        (select a1.cust_id
         from customer_basic_info as a1
                  left join customer_hld_trading_account as a2 on a1.cust_id=a2.cust_id
                  left join customer_hld_capital_account as a4 on a4.trade_account= a2.trade_account
         where a4.sub_account in
               (SELECT p.subAccountId
                FROM customer_hld_holding_history p
                         INNER JOIN (
                    SELECT a.subAccountId, MAX(a.id) AS flowId
                    FROM customer_hld_holding_history a
                    GROUP BY a.subAccountId
                ) q ON p.id = q.flowId AND p.subAccountId = q.subAccountId
                WHERE p.totalQuantity > 0
                GROUP BY p.subAccountId))
    </select>
    <select id="selCustByDateList" resultType="java.lang.String">
        (select a1.cust_id
         from customer_basic_info as a1
                  left join customer_bond_trading_account as a2 on a1.cust_id=a2.cust_id
                  left join customer_bond_capital_account as a4 on a4.trade_account= a2.trade_account
         where a4.sub_account in
               (SELECT p.subAccountId
                FROM customer_bond_holding_history p
                         INNER JOIN (
                    SELECT a.subAccountId, MAX(a.id) AS flowId
                    FROM customer_bond_holding_history a
                    WHERE a.transactionTime &lt; #{endDate}
                    GROUP BY a.subAccountId
                ) q ON p.id = q.flowId AND p.subAccountId = q.subAccountId
                WHERE p.transactionTime >= #{startDate}
                   or (p.transactionTime  &lt; #{endDate} AND p.totalQuantity > 0 )
                GROUP BY p.subAccountId))
        union
        (select a1.cust_id
         from customer_basic_info as a1
                  left join customer_hld_trading_account as a2 on a1.cust_id=a2.cust_id
                  left join customer_hld_capital_account as a4 on a4.trade_account= a2.trade_account
         where a4.sub_account in
               (SELECT p.subAccountId
                FROM customer_hld_holding_history p
                         INNER JOIN (
                    SELECT a.subAccountId, MAX(a.id) AS flowId
                    FROM customer_hld_holding_history a
                    WHERE a.transactionTime &lt; #{endDate}
                    GROUP BY a.subAccountId
                ) q ON p.id = q.flowId AND p.subAccountId = q.subAccountId
                WHERE p.transactionTime >= #{startDate}
                   or (p.transactionTime  &lt; #{endDate} AND p.totalQuantity > 0 )
                GROUP BY p.subAccountId))
    </select>
    <select id="selCustMonthList" resultType="java.lang.String">
        (select a1.cust_id
         from customer_basic_info as a1
                  left join customer_bond_trading_account as a2 on a1.cust_id=a2.cust_id
                  left join customer_bond_capital_account as a4 on a4.trade_account= a2.trade_account
         where a4.sub_account in
               (SELECT p.subAccountId
                FROM customer_bond_holding_history p
                         INNER JOIN (
                    SELECT a.subAccountId, MAX(a.id) AS flowId
                    FROM customer_bond_holding_history a
                    WHERE a.transactionTime &lt; #{endDate}
                    GROUP BY a.subAccountId
                ) q ON p.id = q.flowId AND p.subAccountId = q.subAccountId
                WHERE p.transactionTime >=  #{startDate}
                   or (p.transactionTime  &lt; #{endDate} AND p.totalQuantity > 0 )
                GROUP BY p.subAccountId))
        union
        (select a1.cust_id
         from customer_basic_info as a1
                  left join customer_hld_trading_account as a2 on a1.cust_id=a2.cust_id
                  left join customer_hld_capital_account as a4 on a4.trade_account= a2.trade_account
         where a4.sub_account in
               (SELECT p.subAccountId
                FROM customer_hld_holding_history p
                         INNER JOIN (
                    SELECT a.subAccountId, MAX(a.id) AS flowId
                    FROM customer_hld_holding_history a
                    WHERE a.transactionTime &lt; #{endDate}
                    GROUP BY a.subAccountId
                ) q ON p.id = q.flowId AND p.subAccountId = q.subAccountId
                WHERE p.transactionTime >= #{startDate}
                   or (p.transactionTime  &lt; #{endDate} AND p.totalQuantity > 0 )
                GROUP BY p.subAccountId
               ))
    </select>



    <select id="customerStatementList" resultType="com.minigod.zero.data.vo.CustomerOpenAccountVO" >
        select
        ci.id as custId,
        CONCAT_WS('+',ci.area_code,ci.cell_phone) as phone,
        cbi.client_name as name,
        CONCAT_WS('+',cbi.phone_area,cbi.phone_number) as openPhone,
        CONCAT(cbi.family_name_spell,cbi.given_name_spell) as enName,
        case when cf.type = 1 then DATE_FORMAT(cf.date, '%Y-%m-%d') else DATE_FORMAT(cf.date, '%Y-%m')  end as statementTime,
        cfa.account_id as accountId,
        ci.risk_level as riskLevel,
        ci.pi_level as  piLevel,
        ci.status as status,
        cbi.email as openEmail,
        cf.status as statementStatus,
        cf.id as statementFileId,
        cf.file_name as statementFileName,
        case when cf.type = 1 then cf.url end as dailyStatement,
        case when cf.type = 2 then cf.url end as monthlyStatement
        from customer_file as cf
        left join customer_info as ci on cf.cust_id = ci.id
        left join customer_basic_info cbi on ci.id = cbi.cust_id
        left join customer_financing_account cfa on ci.id = cfa.cust_id and cfa.status = 0
        <where>
            <if test="statementListDTO.startTime != null and statementListDTO.startTime != '' and statementListDTO.statementType != null and statementListDTO.statementType == 1">
                and DATE_FORMAT(cf.date, '%Y-%m-%d') &gt;= #{statementListDTO.startTime}
            </if>
            <if test="statementListDTO.endTime != null and statementListDTO.endTime != '' and statementListDTO.statementType != null and statementListDTO.statementType == 1">
                and DATE_FORMAT(cf.date, '%Y-%m-%d') &lt;= #{statementListDTO.endTime}
            </if>

            <if test="statementListDTO.startTime != null and statementListDTO.startTime != '' and statementListDTO.statementType != null and statementListDTO.statementType == 2">
                and DATE_FORMAT(cf.date, '%Y-%m') &gt;= #{statementListDTO.startTime}
            </if>
            <if test="statementListDTO.endTime != null and statementListDTO.endTime != '' and statementListDTO.statementType != null and statementListDTO.statementType == 2">
                and DATE_FORMAT(cf.date, '%Y-%m') &lt;= #{statementListDTO.endTime}
            </if>
            <if test="statementListDTO.statementType != null">
                and cf.type = #{statementListDTO.statementType}
            </if>
            <if test="statementListDTO.statementStatus != null">
                and cf.status = #{statementListDTO.statementStatus}
            </if>

            <if test="statementListDTO.keyword != null and statementListDTO.keyword != ''">
                and (
                ci.id =#{statementListDTO.keyword}
                or cfa.account_id = #{statementListDTO.keyword}
                or ci.cell_phone = #{statementListDTO.keyword}
                or cbi.phone_number = #{statementListDTO.keyword}
                or cbi.client_name like concat('%',#{statementListDTO.keyword},'%')
                or cbi.given_name_spell like concat('%',#{statementListDTO.keyword},'%')
                )
            </if>
            and cf.type in (1,2)
        </where>
        order by cf.create_time desc
    </select>



    <select id="selCashBalanceList" resultType="com.minigod.zero.data.entity.CustomerCashAssetsHistory">
        select
            *
        from customer_cash_assets_history
        where cust_id = #{custId}
          and statistical_time  <![CDATA[ <= ]]>  #{date}
        order by statistical_time desc
        limit 1

    </select>



    <select id="hldHoldingHistoryList"
            resultType="com.minigod.zero.data.vo.HldHoldingHistoryStatementDailyVO">
        select
            t.id,
            t2.isin  as hldCode,
            t2.productId as productId,
            t2.name as hldName,
            t.currency,
            COALESCE(t.totalQuantity , 0)  as quantity,
            COALESCE(t2.nominalValue, 0) as nominalValue ,
            COALESCE(t.totalQuantity, 0) * COALESCE(t2.nominalValue, 0) as faceAmount,
            COALESCE(t.totalGainLoss, 0) as totalGainLoss,
            COALESCE(t2.nominalValue, 100) as price,
            COALESCE(t3.rate, 1) as rate,
            (COALESCE(t.totalQuantity, 0) * COALESCE(t2.nominalValue, 0)) as hldMarket,
            t.createTime
        from customer_hld_holding_history t
                 INNER JOIN (
            SELECT
                fundCode,
                MAX(createTime) AS MaxTransactionTime
            FROM
                customer_hld_holding_history
            where   subAccountId = #{custStatementDTO.subAccountId}
              and createTime  <![CDATA[ <= ]]> #{custStatementDTO.endDate}
              and holdingType = 64
            GROUP BY
                fundCode
        ) t5 ON t5.fundCode = t.fundCode AND t.createTime = t5.MaxTransactionTime

                 left join t_product t2 on t.fundCode = t2.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'
                 left join t_market_reference_price t1 on t.fundCode = t1.productId

    </select>

    <select id="fundHoldingHistoryList"
            resultType="com.minigod.zero.data.vo.HldHoldingHistoryStatementDailyVO">
        select
               t.id,
               t2.isin                                                          AS hldCode,
               t2.productId                                                     AS productId,
               t2.performanceId                                                      AS performanceId,
               t4.nameCn                                                          AS hldName,
               t.currency,
               COALESCE(t.totalQuantity, 0)                                     AS quantity,
               COALESCE(t.totalGainLoss, 0)                                     AS totalGainLoss,
               COALESCE(t3.rate, 1)                                             AS rate,
               t.createTime
        from customer_fund_holding_history t
                 INNER JOIN (
            SELECT
                fundCode,
                MAX(createTime) AS MaxTransactionTime
            FROM
                customer_fund_holding_history
            where   subAccountId = #{custStatementDTO.subAccountId}
              and createTime  <![CDATA[ <= ]]> #{custStatementDTO.endDate}
              and holdingType = 1
            GROUP BY
                fundCode
        ) t5 ON t5.fundCode = t.fundCode AND t.createTime = t5.MaxTransactionTime

                 left join t_fund t2 on t.fundCode = t2.productId
                 left join t_fund_name t4 on t.fundCode = t4.productId

                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'

    </select>
    <select id="selHldOrderList" resultType="java.lang.String">
        select t3.cust_id
        from customer_hld_trading_transaction t
                 left join customer_hld_capital_account as t2 on t.subAccountId = t2.sub_account
                 left join customer_hld_trading_account as t3 on t2.trade_account = t3.trade_account
        where t.type in (3000,3100)
          and t.transactionDate between #{startTime}  and #{endTime}
          and t3.cust_id is not null
    </select>
    <select id="selBondOrderList" resultType="java.lang.String">
        select t3.cust_id
        from customer_bond_trading_transaction t
                 left join customer_bond_capital_account as t2 on t.subAccountId = t2.sub_account
                 left join customer_bond_trading_account as t3 on t2.trade_account = t3.trade_account
        where t.type in (3200,3300)
          and t.transactionDate between #{startTime}  and #{endTime}
          and t3.cust_id is not null
    </select>

    <select id="selFundOrderList" resultType="java.lang.String">
        select t3.cust_id
        from customer_fund_trading_transaction t
                 left join customer_fund_capital_account as t2 on t.subAccountId = t2.fund_account
                 left join customer_fund_trading_account as t3 on t2.trade_account = t3.trade_account
        where t.type in (700,800)
          and t.transactionDate between #{startTime}  and #{endTime}
          and t3.cust_id is not null
    </select>
    <select id="hldHoldingHistoryByFundCode" resultType="java.math.BigDecimal">
        select
            totalQuantity
        from customer_hld_holding_history t
        where t.fundCode = #{productId}
          and t.createTime  <![CDATA[ <= ]]> #{custStatementDTO.startDate}
          and t.subAccountId = #{custStatementDTO.subAccountId}
          and t.holdingType = 64
        order by t.createTime desc
        limit 1
    </select>
    <select id="fundHoldingHistoryByFundCode" resultType="java.math.BigDecimal">
        select
            totalQuantity
        from customer_fund_holding_history t
        where t.fundCode = #{productId}
          and t.createTime  <![CDATA[ <= ]]> #{custStatementDTO.endDate}
          and t.subAccountId = #{custStatementDTO.subAccountId}
          and t.holdingType = 1
        order by t.createTime desc
        limit 1
    </select>

    <select id="getAverageCost" resultType="java.math.BigDecimal">


    </select>
    <select id="selCashByCustList" resultType="java.lang.String">
        SELECT a.cust_id
        FROM customer_cash_assets_history a
                 INNER JOIN (
            SELECT cust_id, MAX(statistical_time) AS latest_time
            FROM customer_cash_assets_history
            where statistical_time  <![CDATA[ <= ]]> #{endTime}
            GROUP BY cust_id
        ) b ON a.cust_id = b.cust_id AND a.statistical_time = b.latest_time
        WHERE a.hkd_assets > 0 OR a.usd_assets > 0 OR a.cny_assets > 0;
    </select>
    <select id="selHldOrderInfoList" resultType="com.minigod.zero.data.dto.BrokerOrderInfoDTO">
        select t3.cust_id as custId,
        t.currency as currency,
        t.fee as amount,
        t.orderId as orderId,
        COALESCE(t4.rate, 1) as rate
        from customer_hld_trading_transaction t
        left join customer_hld_capital_account as t2 on t.subAccountId = t2.sub_account
        left join customer_hld_trading_account as t3 on t2.trade_account = t3.trade_account
        left join t_exch_rate t4 on t.currency = t4.srcCurrency and t4.dstCurrency = 'HKD'
        <where>
            <if test="orderInfoDTO.typeList != null and orderInfoDTO.typeList.size >0">
                and t.type  IN
                <foreach item="item" index="index" collection="orderInfoDTO.typeList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="orderInfoDTO.startTime != null and orderInfoDTO.startTime != null">
                and t.transactionDate &gt;= #{orderInfoDTO.startTime}
            </if>
            <if test="orderInfoDTO.endTime != null and orderInfoDTO.endTime != null">
                and t.transactionDate &lt;= #{orderInfoDTO.endTime}
            </if>
            and t3.cust_id is not null
        </where>


    </select>
    <select id="selBondOrderInfoList" resultType="com.minigod.zero.data.dto.BrokerOrderInfoDTO">
        select t3.cust_id as custId,
        t.currency as currency,
        t.fee as amount,
        t.orderId as orderId,
        COALESCE(t4.rate, 1) as rate
        from customer_bond_trading_transaction t
        left join customer_bond_capital_account as t2 on t.subAccountId = t2.sub_account
        left join customer_bond_trading_account as t3 on t2.trade_account = t3.trade_account
        left join t_exch_rate t4 on t.currency = t4.srcCurrency and t4.dstCurrency = 'HKD'

        <where>
            <if test="orderInfoDTO.typeList != null and orderInfoDTO.typeList.size >0">
                and t.type  IN
                <foreach item="item" index="index" collection="orderInfoDTO.typeList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="orderInfoDTO.startTime != null and orderInfoDTO.startTime != null">
                and t.transactionDate &gt;= #{orderInfoDTO.startTime}
            </if>
            <if test="orderInfoDTO.endTime != null and orderInfoDTO.endTime != null">
                and t.transactionDate &lt;= #{orderInfoDTO.endTime}
            </if>
            and t3.cust_id is not null
        </where>
    </select>
    <select id="fundTradingStatementList" resultType="com.minigod.zero.data.vo.FundTradingBuyStatementDailyVO">
        /*基金买入确认单*/
        select t2.nameCn as hldName ,
               t2.isin as hldCode,
               t1.settled_date AS transactionDate,
               t.currency AS currency,
               t.orderId AS orderId,
               COALESCE(t.quantity, 0) as quantity,
               COALESCE(t.price,0)as businessPrice,
               COALESCE(t.amount,0) as amout,
               COALESCE(t.fee,0) as fee,
               COALESCE(t1.transaction_gain_loss,0)as transactionGainLoss,
               COALESCE(t.amount,0) as totalSettlementAmount,
               COALESCE(t3.rate, 1) as rate,
               t1.type as orderType,
               t1.submit_date as submitDate
        from customer_fund_trading_transaction t
                 left join customer_fund_trading_records t1 on t.orderId = t1.id
                 left join t_fund_name t2 on t.fundCode = t2.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'

        where t.type = 700 and  t.transactionDate  &gt;= #{custStatementDTO.startDate}
          and t.transactionDate  &lt;= #{custStatementDTO.endDate}
          and t.subAccountId = #{custStatementDTO.subAccountId}
    </select>
    <select id="fundTradingSaleStatementList"
            resultType="com.minigod.zero.data.vo.FundTradingSaleStatementDailyVO">
        /*基金卖出确认单*/
        select t2.nameCn as hldName ,
               t2.isin as hldCode,
               t1.settled_date, '%Y%m%d' transactionDate,
               t.currency AS currency,
               t.orderId AS orderId,
               COALESCE(t.quantity, 0) as quantity,
               COALESCE(t.price,0)as businessPrice,
               COALESCE(t.amount,0) as amout,
               COALESCE(t1.transaction_gain_loss,0)as transactionGainLoss,
               COALESCE(t.amount,0) as totalSettlementAmount,
               COALESCE(t3.rate, 1) as rate,
               COALESCE(t.fee,0) as fee,
               t1.type as orderType,
               t1.submit_date as submitDate
        from customer_fund_trading_transaction t
                 left join customer_fund_trading_records t1 on t.orderId = t1.id
                 left join t_fund_name t2 on t.fundCode = t2.productId
                 left join t_exch_rate t3 on t.currency = t3.srcCurrency and t3.dstCurrency = 'HKD'

        where  t.type = 800 and  t.transactionDate  &gt;= #{custStatementDTO.startDate}
          and t.transactionDate  &lt;= #{custStatementDTO.endDate}
          and t.subAccountId = #{custStatementDTO.subAccountId}
    </select>

</mapper>
