package com.minigod.zero.trade.afe.webservice.generalservice;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

/**
 * This class was generated by Apache CXF 3.2.6
 * 2024-10-24T15:18:55.725+08:00
 * Generated source version: 3.2.6
 *
 */
@WebServiceClient(name = "GeneralService",
                  wsdlLocation = "http://218.189.34.216:9081/g3sb_webservice/services/GeneralService?wsdl",
                  targetNamespace = "http://webservice.g3sb.afe.com")
@Component
@Lazy
public class GeneralService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservice.g3sb.afe.com", "GeneralService");
    public final static QName GeneralServiceHttpSoap12Endpoint = new QName("http://webservice.g3sb.afe.com", "GeneralServiceHttpSoap12Endpoint");
    public final static QName GeneralServiceHttpEndpoint = new QName("http://webservice.g3sb.afe.com", "GeneralServiceHttpEndpoint");
    public final static QName GeneralServiceHttpSoap11Endpoint = new QName("http://webservice.g3sb.afe.com", "GeneralServiceHttpSoap11Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://218.189.34.216:9081/g3sb_webservice/services/GeneralService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(GeneralService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://218.189.34.216:9081/g3sb_webservice/services/GeneralService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public GeneralService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public GeneralService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public GeneralService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public GeneralService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public GeneralService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public GeneralService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns GeneralServicePortType
     */
    @WebEndpoint(name = "GeneralServiceHttpSoap12Endpoint")
    public GeneralServicePortType getGeneralServiceHttpSoap12Endpoint() {
        return super.getPort(GeneralServiceHttpSoap12Endpoint, GeneralServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeneralServicePortType
     */
    @WebEndpoint(name = "GeneralServiceHttpSoap12Endpoint")
    public GeneralServicePortType getGeneralServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(GeneralServiceHttpSoap12Endpoint, GeneralServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns GeneralServicePortType
     */
    @WebEndpoint(name = "GeneralServiceHttpEndpoint")
    public GeneralServicePortType getGeneralServiceHttpEndpoint() {
        return super.getPort(GeneralServiceHttpEndpoint, GeneralServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeneralServicePortType
     */
    @WebEndpoint(name = "GeneralServiceHttpEndpoint")
    public GeneralServicePortType getGeneralServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(GeneralServiceHttpEndpoint, GeneralServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns GeneralServicePortType
     */
    @WebEndpoint(name = "GeneralServiceHttpSoap11Endpoint")
    public GeneralServicePortType getGeneralServiceHttpSoap11Endpoint() {
        return super.getPort(GeneralServiceHttpSoap11Endpoint, GeneralServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns GeneralServicePortType
     */
    @WebEndpoint(name = "GeneralServiceHttpSoap11Endpoint")
    public GeneralServicePortType getGeneralServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(GeneralServiceHttpSoap11Endpoint, GeneralServicePortType.class, features);
    }

}
