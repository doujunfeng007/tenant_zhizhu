<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.minigod.zero.customer.mapper.FundCapitalAccountAmountMapper">

    <resultMap id="BaseResultMap" type="com.minigod.zero.customer.entity.FundCapitalAccountAmount">
            <id property="id" column="id" jdbcType="INTEGER"/>
            <result property="fundAccount" column="fund_account" jdbcType="VARCHAR"/>
            <result property="availableAmount" column="available_amount" jdbcType="DECIMAL"/>
            <result property="freezeAmount" column="freeze_amount" jdbcType="DECIMAL"/>
            <result property="transitedAmount" column="transited_amount" jdbcType="DECIMAL"/>
            <result property="currency" column="currency" jdbcType="VARCHAR"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,fund_account,available_amount,
        freeze_amount,transited_amount,currency,
        create_time,update_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from fund_capital_account_amount
        where  id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from fund_capital_account_amount
        where  id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.minigod.zero.customer.entity.FundCapitalAccountAmount" useGeneratedKeys="true">
        insert into fund_capital_account_amount
        ( id,fund_account,available_amount
        ,freeze_amount,transited_amount,currency
        ,create_time,update_time)
        values (#{id,jdbcType=INTEGER},#{fundAccount,jdbcType=VARCHAR},#{availableAmount,jdbcType=DECIMAL}
        ,#{freezeAmount,jdbcType=DECIMAL},#{transitedAmount,jdbcType=DECIMAL},#{currency,jdbcType=VARCHAR}
        ,#{createTime,jdbcType=TIMESTAMP},#{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.minigod.zero.customer.entity.FundCapitalAccountAmount" useGeneratedKeys="true">
        insert into fund_capital_account_amount
        <trim prefix="(" suffix=")" suffixOverrides=",">
                <if test="id != null">id,</if>
                <if test="fundAccount != null">fund_account,</if>
                <if test="availableAmount != null">available_amount,</if>
                <if test="freezeAmount != null">freeze_amount,</if>
                <if test="transitedAmount != null">transited_amount,</if>
                <if test="currency != null">currency,</if>
                <if test="createTime != null">create_time,</if>
                <if test="updateTime != null">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
                <if test="id != null">#{id,jdbcType=INTEGER},</if>
                <if test="fundAccount != null">#{fundAccount,jdbcType=VARCHAR},</if>
                <if test="availableAmount != null">#{availableAmount,jdbcType=DECIMAL},</if>
                <if test="freezeAmount != null">#{freezeAmount,jdbcType=DECIMAL},</if>
                <if test="transitedAmount != null">#{transitedAmount,jdbcType=DECIMAL},</if>
                <if test="currency != null">#{currency,jdbcType=VARCHAR},</if>
                <if test="createTime != null">#{createTime,jdbcType=TIMESTAMP},</if>
                <if test="updateTime != null">#{updateTime,jdbcType=TIMESTAMP},</if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.minigod.zero.customer.entity.FundCapitalAccountAmount">
        update fund_capital_account_amount
        <set>
                <if test="fundAccount != null">
                    fund_account = #{fundAccount,jdbcType=VARCHAR},
                </if>
                <if test="availableAmount != null">
                    available_amount = #{availableAmount,jdbcType=DECIMAL},
                </if>
                <if test="freezeAmount != null">
                    freeze_amount = #{freezeAmount,jdbcType=DECIMAL},
                </if>
                <if test="transitedAmount != null">
                    transited_amount = #{transitedAmount,jdbcType=DECIMAL},
                </if>
                <if test="currency != null">
                    currency = #{currency,jdbcType=VARCHAR},
                </if>
                <if test="createTime != null">
                    create_time = #{createTime,jdbcType=TIMESTAMP},
                </if>
                <if test="updateTime != null">
                    update_time = #{updateTime,jdbcType=TIMESTAMP},
                </if>
        </set>
        where   id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.minigod.zero.customer.entity.FundCapitalAccountAmount">
        update fund_capital_account_amount
        set
            fund_account =  #{fundAccount,jdbcType=VARCHAR},
            available_amount =  #{availableAmount,jdbcType=DECIMAL},
            freeze_amount =  #{freezeAmount,jdbcType=DECIMAL},
            transited_amount =  #{transitedAmount,jdbcType=DECIMAL},
            currency =  #{currency,jdbcType=VARCHAR},
            create_time =  #{createTime,jdbcType=TIMESTAMP},
            update_time =  #{updateTime,jdbcType=TIMESTAMP}
        where   id = #{id,jdbcType=INTEGER}
    </update>

    <update id="freezeAvailableAmount" parameterType="java.lang.Object">
        update fund_capital_account_amount set available_amount = available_amount - #{amount},freeze_amount= freeze_amount + #{amount} ,update_time  = now()
        where id = #{id} and available_amount >= #{amount}
    </update>

    <update id="reduceFreezeAmount" parameterType="java.lang.Object">
        update fund_capital_account_amount set freeze_amount= freeze_amount - #{amount} ,update_time  = now()
        where id = #{id} and freeze_amount >= #{amount}
    </update>

    <update id="freezeToAvailableAmount" parameterType="java.lang.Object">
        update fund_capital_account_amount set available_amount = available_amount + #{amount},freeze_amount= freeze_amount - #{amount} ,update_time  = now()
        where id = #{id} and freeze_amount > #{amount}
    </update>

    <select id="selectByAccountAndCurrency" parameterType="java.lang.Object" resultMap="BaseResultMap">
        select * from fund_capital_account_amount where fund_account =#{account} and currency =#{currency}
    </select>
    <update id="goldDeposit" parameterType="java.lang.Object">
        update fund_capital_account_amount set available_amount = available_amount + #{amount},update_time  = now()
        where id = #{id}
    </update>

    <update id="scratchButton" parameterType="java.lang.Object">
        update fund_capital_account_amount set available_amount = available_amount - #{amount},update_time  = now()
        where id = #{id} and available_amount >= #{amount}
    </update>


    <select id="selectByTradingAccount" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
            sub.*
        from fund_capital_account_amount as sub
        left join customer_fund_capital_account ca on ca.fund_account = sub.fund_account
        where  ca.trade_account = #{account}
        <if test="currency != null and currency != ''">
            and sub.currency =#{currency}
        </if>
    </select>
</mapper>
